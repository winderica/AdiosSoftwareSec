[
  "        int foo(char *test) {\n            printf(\"%d%d%d\", a, b);\n                    printf(\"%n\");\n            printf(test);\n}\n",
  "\n#include <stdlib.h>\n#include <stdio.h>\n#include <inttypes.h>\n#include <stdint.h>\n#include <stdbool.h>\n#include <string.h>\n\nFILE *log_file;\n\nvoid append_command(char type, char *data) {\n    fprintf(log_file, \"%c %s\\n\", type, data);\n}\n\nvoid set_login_message(char *message) {\n    if (!message) {\n        printf(\"No message chosen\\n\");\n        exit(1);\n    }\n    printf(\"Login message set!\\n%s\\n\", message);\n\n    append_command('l', message);\n    exit(0);\n}\n\nvoid set_exit_message(char *message) {\n    if (!message) {\n        printf(\"No message chosen\\n\");\n        exit(1);\n    }\n    printf(\"Exit message set!\\n\");\n    printf(message);\n\n    append_command('e', message);\n    exit(0);\n}\n\nvoid set_prompt(char *prompt) {\n    if (!prompt) {\n        printf(\"No prompt chosen\\n\");\n        exit(1);\n    }\n    if (strlen(prompt) > 10) {\n        printf(\"Prompt too long\\n\");\n        exit(1);\n    }\n    printf(\"Login prompt set to: %10s\\n\", prompt);\n\n    append_command('p', prompt);\n    exit(0);\n}\n\nvoid print_help() {\n    printf(\n        \"You can:\\n\"\n        \"    login <login-message>    set the login message\\n\"\n        \"    exit <exit-message>      set the exit message\\n\"\n        \"    prompt <prompt>          set the command prompt\\n\"\n    );\n}\n\nvoid loop() {\n    char buf[1024];\n    while (true) {\n        printf(\"Config action: \");\n        char *result = fgets(buf, 1024, stdin);\n        if (!result) exit(1);\n        char *type = strtok(result, \" \");\n        if (type == NULL) {\n            continue;\n        }\n        char *arg = strtok(NULL, \"\\n\");\n        switch (type[0]) {\n        case 'l':\n            set_login_message(arg);\n            break;\n        case 'e':\n            set_exit_message(arg);\n            break;\n        case 'p':\n            set_prompt(arg);\n            break;\n        default:\n            printf(\"Command unrecognized.\\n\");\n            /* Fallthrough */\n        case 'h':\n            print_help();\n            break;\n        }\n    }\n}\n\nint main(int argc, char **argv) {\n    if (argc != 2) {\n        fprintf(stderr, \"Requires log file\\n\");\n        return 1;\n    }\n    log_file = fopen(argv[1], \"a\");\n    \n    setbuf(stdout, NULL);\n    loop();\n    return 0;\n}\n    "]
