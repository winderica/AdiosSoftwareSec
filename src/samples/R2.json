[
  "static const char en85[] = {\n\t'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n\t'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\n\t'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',\n\t'U', 'V', 'W', 'X', 'Y', 'Z',\n\t'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\n\t'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n\t'u', 'v', 'w', 'x', 'y', 'z',\n\t'!', '#', '$', '%', '&', '(', ')', '*', '+', '-',\n\t';', '<', '=', '>', '?', '@', '^', '_',\t'`', '{',\n\t'|', '}', '~'\n};\n\nstatic char de85[256];\nstatic void prep_base85(void)\n{\n\tint i;\n\tif (de85['Z'])\n\t\treturn;\n\tfor (i = 0; i < ARRAY_SIZE(en85); i++) {\n\t\tint ch = en85[i];\n\t\tde85[ch] = i + 1;\n\t}\n}\n\nint decode_85(char *dst, const char *buffer, int len)\n{\n\tprep_base85();\n\n\tsay2(\"decode 85 <%.*s>\", len / 4 * 5, buffer);\n\twhile (len) {\n\t\tunsigned acc = 0;\n\t\tint de, cnt = 4;\n\t\tunsigned char ch;\n\t\tdo {\n\t\t\tch = *buffer++;\n\t\t\tde = de85[ch];\n\t\t\tif (--de < 0)\n\t\t\t\treturn error(\"invalid base85 alphabet %c\", ch);\n\t\t\tacc = acc * 85 + de;\n\t\t} while (--cnt);\n\t\tch = *buffer++;\n\t\tde = de85[ch];\n\t\tif (--de < 0)\n\t\t\treturn error(\"invalid base85 alphabet %c\", ch);\n\t\t/* Detect overflow. */\n\t\tif (0xffffffff / 85 < acc ||\n\t\t    0xffffffff - de < (acc *= 85))\n\t\t\treturn error(\"invalid base85 sequence %.5s\", buffer-5);\n\t\tacc += de;\n\t\tsay1(\" %08x\", acc);\n\n\t\tcnt = (len < 4) ? len : 4;\n\t\tlen -= cnt;\n\t\tdo {\n\t\t\tacc = (acc << 8) | (acc >> 24);\n\t\t\t*dst++ = acc;\n\t\t} while (--cnt);\n\t}\n\tsay(\"\\n\");\n\n\treturn 0;\n}\n\nvoid encode_85(char *buf, const unsigned char *data, int bytes)\n{\n\tsay(\"encode 85\");\n\twhile (bytes) {\n\t\tunsigned acc = 0;\n\t\tint cnt;\n\t\tfor (cnt = 24; cnt >= 0; cnt -= 8) {\n\t\t\tunsigned ch = *data++;\n\t\t\tacc |= ch << cnt;\n\t\t\tif (--bytes == 0)\n\t\t\t\tbreak;\n\t\t}\n\t\tsay1(\" %08x\", acc);\n\t\tfor (cnt = 4; cnt >= 0; cnt--) {\n\t\t\tint val = acc % 85;\n\t\t\tacc /= 85;\n\t\t\tbuf[cnt] = en85[val];\n\t\t}\n\t\tbuf += 5;\n\t}\n\tsay(\"\\n\");\n\n\t*buf = 0;\n}\n\nint main(int ac, char **av)\n{\n\tchar buf[1024];\n\n\tif (!strcmp(av[1], \"-e\")) {\n\t\tint len = strlen(av[2]);\n\t\tencode_85(buf, av[2], len);\n\t\tif (len <= 26) len = len + 'A' - 1;\n\t\telse len = len + 'a' - 26 - 1;\n\t\tprintf(\"encoded: %c%s\\n\", len, buf);\n\t\treturn 0;\n\t}\n\tif (!strcmp(av[1], \"-d\")) {\n\t\tint len = *av[2];\n\t\tif ('A' <= len && len <= 'Z') len = len - 'A' + 1;\n\t\telse len = len - 'a' + 26 + 1;\n\t\tdecode_85(buf, av[2]+1, len);\n\t\tprintf(\"decoded: %.*s\\n\", len, buf);\n\t\treturn 0;\n\t}\n\tif (!strcmp(av[1], \"-t\")) {\n\t\tchar t[4] = { -1,-1,-1,-1 };\n\t\tencode_85(buf, t, 4);\n\t\tprintf(\"encoded: D%s\\n\", buf);\n\t\treturn 0;\n\t}\n}",
  "static const char en85[] = {\n\t'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n\t'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\n\t'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',\n\t'U', 'V', 'W', 'X', 'Y', 'Z',\n\t'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\n\t'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n\t'u', 'v', 'w', 'x', 'y', 'z',\n\t'!', '#', '$', '%', '&', '(', ')', '*', '+', '-',\n\t';', '<', '=', '>', '?', '@', '^', '_',\t'`', '{',\n\t'|', '}', '~'\n};\n\nstatic char de85[256];\nstatic void prep_base85(void)\n{\n\tint i;\n\tif (de85['Z'])\n\t\treturn;\n\tfor (i = 0; i < ARRAY_SIZE(en85); i++) {\n\t\tint ch = en85[i];\n\t\tde85[ch] = i + 1;\n\t}\n}\n\nint decode_85(char *dst, const char *buffer, int len)\n{\n\tprep_base85();\n\n\tsay2(\"decode 85 <%.*s>\", len/4*5, buffer);\n\twhile (len) {\n\t\tunsigned acc = 0;\n\t\tint de, cnt = 4;\n\t\tunsigned char ch;\n\t\tdo {\n\t\t\tch = *buffer++;\n\t\t\tde = de85[ch];\n\t\t\tif (--de < 0)\n\t\t\t\treturn error(\"invalid base85 alphabet %c\", ch);\n\t\t\tacc = acc * 85 + de;\n\t\t} while (--cnt);\n\t\tch = *buffer++;\n\t\tde = de85[ch];\n\t\tif (--de < 0)\n\t\t\treturn error(\"invalid base85 alphabet %c\", ch);\n\t\t/* Detect overflow. */\n\t\tif (0xffffffff / 85 < acc ||\n\t\t    0xffffffff - de < (acc *= 85))\n\t\t\treturn error(\"invalid base85 sequence %.5s\", buffer-5);\n\t\tacc += de;\n\t\tsay1(\" %08x\", acc);\n\n\t\tcnt = (len < 4) ? len : 4;\n\t\tlen -= cnt;\n\t\tdo {\n\t\t\tacc = (acc << 8) | (acc >> 24);\n\t\t\t*dst++ = acc;\n\t\t} while (--cnt);\n\t}\n\tsay(\"\\n\");\n\n\treturn 0;\n}\n\nvoid encode_85(char *buf, const unsigned char *data, int bytes)\n{\n\tsay(\"encode 85\");\n\twhile (bytes) {\n\t\tunsigned acc = 0;\n\t\tint cnt;\n\t\tfor (cnt = 24; cnt >= 0; cnt -= 8) {\n\t\t\tint ch = *data++;\n\t\t\tacc |= ch << cnt;\n\t\t\tif (--bytes == 0)\n\t\t\t\tbreak;\n\t\t}\n\t\tsay1(\" %08x\", acc);\n\t\tfor (cnt = 4; cnt >= 0; cnt--) {\n\t\t\tint val = acc % 85;\n\t\t\tacc /= 85;\n\t\t\tbuf[cnt] = en85[val];\n\t\t}\n\t\tbuf += 5;\n\t}\n\tsay(\"\\n\");\n\n\t*buf = 0;\n}\n\nint main(int ac, char **av)\n{\n\tchar buf[1024];\n\n\tif (!strcmp(av[1], \"-e\")) {\n\t\tint len = strlen(av[2]);\n\t\tencode_85(buf, av[2], len);\n\t\tif (len <= 26) len = len + 'A' - 1;\n\t\telse len = len + 'a' - 26 - 1;\n\t\tprintf(\"encoded: %c%s\\n\", len, buf);\n\t\treturn 0;\n\t}\n\tif (!strcmp(av[1], \"-d\")) {\n\t\tint len = *av[2];\n\t\tif ('A' <= len && len <= 'Z') len = len - 'A' + 1;\n\t\telse len = len - 'a' + 26 + 1;\n\t\tdecode_85(buf, av[2]+1, len);\n\t\tprintf(\"decoded: %.*s\\n\", len, buf);\n\t\treturn 0;\n\t}\n\tif (!strcmp(av[1], \"-t\")) {\n\t\tchar t[4] = { -1,-1,-1,-1 };\n\t\tencode_85(buf, t, 4);\n\t\tprintf(\"encoded: D%s\\n\", buf);\n\t\treturn 0;\n\t}\n}",
  "static const char en85[] = {\n\t'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n\t'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\n\t'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',\n\t'U', 'V', 'W', 'X', 'Y', 'Z',\n\t'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\n\t'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n\t'u', 'v', 'w', 'x', 'y', 'z',\n\t'!', '#', '$', '%', '&', '(', ')', '*', '+', '-',\n\t';', '<', '=', '>', '?', '@', '^', '_',\t'`', '{',\n\t'|', '}', '~'\n};\n\nstatic char de85[256];\nstatic void prep_base85(void)\n{\n\tint i;\n\tif (de85['Z'])\n\t\treturn;\n\tfor (i = 0; i < ARRAY_SIZE(en85); i++) {\n\t\tint ch = en85[i];\n\t\tde85[ch] = i + 1;\n\t}\n}\n\nint decode_85(char *dst, const char *buffer, int len)\n{\n\tprep_base85();\n\n\tsay2(\"decode 85 <%.*s>\", len/4*5, buffer);\n\twhile (len) {\n\t\tunsigned acc = 0;\n\t\tint de, cnt = 4;\n\t\tunsigned char ch;\n\t\tdo {\n\t\t\tch = *buffer++;\n\t\t\tde = de85[ch];\n\t\t\tif (--de < 0)\n\t\t\t\treturn error(\"invalid base85 alphabet %c\", ch);\n\t\t\tacc = acc * 85 + de;\n\t\t} while (--cnt);\n\t\tch = *buffer++;\n\t\tde = de85[ch];\n\t\tif (--de < 0)\n\t\t\treturn error(\"invalid base85 alphabet %c\", ch);\n\t\t/*\n\t\t * Detect overflow.  The largest\n\t\t * 5-letter possible is \"|NsC0\" to\n\t\t * encode 0xffffffff, and \"|NsC\" gives\n\t\t * 0x03030303 at this point (i.e.\n\t\t * 0xffffffff = 0x03030303 * 85).\n\t\t */\n\t\tif (0x03030303 < acc ||\n\t\t    0xffffffff - de < (acc *= 85))\n\t\t\treturn error(\"invalid base85 sequence %.5s\", buffer-5);\n\t\tacc += de;\n\t\tsay1(\" %08x\", acc);\n\n\t\tcnt = (len < 4) ? len : 4;\n\t\tlen -= cnt;\n\t\tdo {\n\t\t\tacc = (acc << 8) | (acc >> 24);\n\t\t\t*dst++ = acc;\n\t\t} while (--cnt);\n\t}\n\tsay(\"\\n\");\n\n\treturn 0;\n}\n\nvoid encode_85(char *buf, const unsigned char *data, int bytes)\n{\n\tsay(\"encode 85\");\n\twhile (bytes) {\n\t\tunsigned acc = 0;\n\t\tint cnt;\n\t\tfor (cnt = 24; cnt >= 0; cnt -= 8) {\n\t\t\tint ch = *data++;\n\t\t\tacc |= ch << cnt;\n\t\t\tif (--bytes == 0)\n\t\t\t\tbreak;\n\t\t}\n\t\tsay1(\" %08x\", acc);\n\t\tfor (cnt = 4; cnt >= 0; cnt--) {\n\t\t\tint val = acc % 85;\n\t\t\tacc /= 85;\n\t\t\tbuf[cnt] = en85[val];\n\t\t}\n\t\tbuf += 5;\n\t}\n\tsay(\"\\n\");\n\n\t*buf = 0;\n}\n\nint main(int ac, char **av)\n{\n\tchar buf[1024];\n\n\tif (!strcmp(av[1], \"-e\")) {\n\t\tint len = strlen(av[2]);\n\t\tencode_85(buf, av[2], len);\n\t\tif (len <= 26) len = len + 'A' - 1;\n\t\telse len = len + 'a' - 26 - 1;\n\t\tprintf(\"encoded: %c%s\\n\", len, buf);\n\t\treturn 0;\n\t}\n\tif (!strcmp(av[1], \"-d\")) {\n\t\tint len = *av[2];\n\t\tif ('A' <= len && len <= 'Z') len = len - 'A' + 1;\n\t\telse len = len - 'a' + 26 + 1;\n\t\tdecode_85(buf, av[2]+1, len);\n\t\tprintf(\"decoded: %.*s\\n\", len, buf);\n\t\treturn 0;\n\t}\n\tif (!strcmp(av[1], \"-t\")) {\n\t\tchar t[4] = { -1,-1,-1,-1 };\n\t\tencode_85(buf, t, 4);\n\t\tprintf(\"encoded: D%s\\n\", buf);\n\t\treturn 0;\n\t}\n}",
  "static const char en85[] = {\n\t'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n\t'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\n\t'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',\n\t'U', 'V', 'W', 'X', 'Y', 'Z',\n\t'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\n\t'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n\t'u', 'v', 'w', 'x', 'y', 'z',\n\t'!', '#', '$', '%', '&', '(', ')', '*', '+', '-',\n\t';', '<', '=', '>', '?', '@', '^', '_',\t'`', '{',\n\t'|', '}', '~'\n};\n\nstatic char de85[256];\nstatic void prep_base85(void)\n{\n\tint i;\n\tif (de85['Z'])\n\t\treturn;\n\tfor (i = 0; i < ARRAY_SIZE(en85); i++) {\n\t\tint ch = en85[i];\n\t\tde85[ch] = i + 1;\n\t}\n}\n\nint decode_85(char *dst, const char *buffer, int len)\n{\n\tprep_base85();\n\n\tsay2(\"decode 85 <%.*s>\", len/4*5, buffer);\n\twhile (len) {\n\t\tunsigned acc = 0;\n\t\tint de, cnt = 4;\n\t\tunsigned char ch;\n\t\tdo {\n\t\t\tch = *buffer++;\n\t\t\tde = de85[ch];\n\t\t\tif (--de < 0)\n\t\t\t\treturn error(\"invalid base85 alphabet %c\", ch);\n\t\t\tacc = acc * 85 + de;\n\t\t} while (--cnt);\n\t\tch = *buffer++;\n\t\tde = de85[ch];\n\t\tif (--de < 0)\n\t\t\treturn error(\"invalid base85 alphabet %c\", ch);\n\t\t/*\n\t\t * Detect overflow.  The largest\n\t\t * 5-letter possible is \"|NsC0\" to\n\t\t * encode 0xffffffff, and \"|NsC\" gives\n\t\t * 0x03030303 at this point (i.e.\n\t\t * 0xffffffff = 0x03030303 * 85).\n\t\t */\n\t\tif (0x03030303 < acc ||\n\t\t    0xffffffff - de < (acc *= 85))\n\t\t\terror(\"invalid base85 sequence %.5s\", buffer-5);\n\t\tacc += de;\n\t\tsay1(\" %08x\", acc);\n\n\t\tcnt = (len < 4) ? len : 4;\n\t\tlen -= cnt;\n\t\tdo {\n\t\t\tacc = (acc << 8) | (acc >> 24);\n\t\t\t*dst++ = acc;\n\t\t} while (--cnt);\n\t}\n\tsay(\"\\n\");\n\n\treturn 0;\n}\n\nvoid encode_85(char *buf, const unsigned char *data, int bytes)\n{\n\tprep_base85();\n\n\tsay(\"encode 85\");\n\twhile (bytes) {\n\t\tunsigned acc = 0;\n\t\tint cnt;\n\t\tfor (cnt = 24; cnt >= 0; cnt -= 8) {\n\t\t\tint ch = *data++;\n\t\t\tacc |= ch << cnt;\n\t\t\tif (--bytes == 0)\n\t\t\t\tbreak;\n\t\t}\n\t\tsay1(\" %08x\", acc);\n\t\tfor (cnt = 4; cnt >= 0; cnt--) {\n\t\t\tint val = acc % 85;\n\t\t\tacc /= 85;\n\t\t\tbuf[cnt] = en85[val];\n\t\t}\n\t\tbuf += 5;\n\t}\n\tsay(\"\\n\");\n\n\t*buf = 0;\n}\n\nint main(int ac, char **av)\n{\n\tchar buf[1024];\n\n\tif (!strcmp(av[1], \"-e\")) {\n\t\tint len = strlen(av[2]);\n\t\tencode_85(buf, av[2], len);\n\t\tif (len <= 26) len = len + 'A' - 1;\n\t\telse len = len + 'a' - 26 + 1;\n\t\tprintf(\"encoded: %c%s\\n\", len, buf);\n\t\treturn 0;\n\t}\n\tif (!strcmp(av[1], \"-d\")) {\n\t\tint len = *av[2];\n\t\tif ('A' <= len && len <= 'Z') len = len - 'A' + 1;\n\t\telse len = len - 'a' + 26 + 1;\n\t\tdecode_85(buf, av[2]+1, len);\n\t\tprintf(\"decoded: %.*s\\n\", len, buf);\n\t\treturn 0;\n\t}\n\tif (!strcmp(av[1], \"-t\")) {\n\t\tchar t[4] = { -1,-1,-1,-1 };\n\t\tencode_85(buf, t, 4);\n\t\tprintf(\"encoded: D%s\\n\", buf);\n\t\treturn 0;\n\t}\n}",
  "\nstatic const char en85[] = {\n\t'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n\t'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\n\t'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',\n\t'U', 'V', 'W', 'X', 'Y', 'Z',\n\t'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\n\t'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n\t'u', 'v', 'w', 'x', 'y', 'z',\n\t'!', '#', '$', '%', '&', '(', ')', '*', '+', '-',\n\t';', '<', '=', '>', '?', '@', '^', '_',\t'`', '{',\n\t'|', '}', '~'\n};\n\nstatic char de85[256];\nstatic void prep_base85(void)\n{\n\tint i;\n\tif (de85['Z'])\n\t\treturn;\n\tfor (i = 0; i < ARRAY_SIZE(en85); i++) {\n\t\tint ch = en85[i];\n\t\tde85[ch] = i + 1;\n\t}\n}\n\nint decode_85(char *dst, char *buffer, int len)\n{\n\tprep_base85();\n\n\tsay2(\"decode 85 <%.*s>\", len/4*5, buffer);\n\twhile (len) {\n\t\tunsigned acc = 0;\n\t\tint de, cnt = 4;\n\t\tunsigned char ch;\n\t\tdo {\n\t\t\tch = *buffer++;\n\t\t\tde = de85[ch];\n\t\t\tif (--de < 0)\n\t\t\t\treturn error(\"invalid base85 alphabet %c\", ch);\n\t\t\tacc = acc * 85 + de;\n\t\t} while (--cnt);\n\t\tch = *buffer++;\n\t\tde = de85[ch];\n\t\tif (--de < 0)\n\t\t\treturn error(\"invalid base85 alphabet %c\", ch);\n\t\t/*\n\t\t * Detect overflow.  The largest\n\t\t * 5-letter possible is \"|NsC0\" to\n\t\t * encode 0xffffffff, and \"|NsC\" gives\n\t\t * 0x03030303 at this point (i.e.\n\t\t * 0xffffffff = 0x03030303 * 85).\n\t\t */\n\t\tif (0x03030303 < acc ||\n\t\t    0xffffffff - de < (acc *= 85))\n\t\t\terror(\"invalid base85 sequence %.5s\", buffer-5);\n\t\tacc += de;\n\t\tsay1(\" %08x\", acc);\n\n\t\tcnt = (len < 4) ? len : 4;\n\t\tlen -= cnt;\n\t\tdo {\n\t\t\tacc = (acc << 8) | (acc >> 24);\n\t\t\t*dst++ = acc;\n\t\t} while (--cnt);\n\t}\n\tsay(\"\\n\");\n\n\treturn 0;\n}\n\nvoid encode_85(char *buf, unsigned char *data, int bytes)\n{\n\tprep_base85();\n\n\tsay(\"encode 85\");\n\twhile (bytes) {\n\t\tunsigned acc = 0;\n\t\tint cnt;\n\t\tfor (cnt = 24; cnt >= 0; cnt -= 8) {\n\t\t\tint ch = *data++;\n\t\t\tacc |= ch << cnt;\n\t\t\tif (--bytes == 0)\n\t\t\t\tbreak;\n\t\t}\n\t\tsay1(\" %08x\", acc);\n\t\tfor (cnt = 4; cnt >= 0; cnt--) {\n\t\t\tint val = acc % 85;\n\t\t\tacc /= 85;\n\t\t\tbuf[cnt] = en85[val];\n\t\t}\n\t\tbuf += 5;\n\t}\n\tsay(\"\\n\");\n\n\t*buf = 0;\n}\n\nint main(int ac, char **av)\n{\n\tchar buf[1024];\n\n\tif (!strcmp(av[1], \"-e\")) {\n\t\tint len = strlen(av[2]);\n\t\tencode_85(buf, av[2], len);\n\t\tif (len <= 26) len = len + 'A' - 1;\n\t\telse len = len + 'a' - 26 + 1;\n\t\tprintf(\"encoded: %c%s\\n\", len, buf);\n\t\treturn 0;\n\t}\n\tif (!strcmp(av[1], \"-d\")) {\n\t\tint len = *av[2];\n\t\tif ('A' <= len && len <= 'Z') len = len - 'A' + 1;\n\t\telse len = len - 'a' + 26 + 1;\n\t\tdecode_85(buf, av[2]+1, len);\n\t\tprintf(\"decoded: %.*s\\n\", len, buf);\n\t\treturn 0;\n\t}\n\tif (!strcmp(av[1], \"-t\")) {\n\t\tchar t[4] = { -1,-1,-1,-1 };\n\t\tencode_85(buf, t, 4);\n\t\tprintf(\"encoded: D%s\\n\", buf);\n\t\treturn 0;\n\t}\n}"
]
